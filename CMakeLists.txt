cmake_minimum_required(VERSION 3.2)

#------------------------------------------------------------------------------------------------
# Configuration
#------------------------------------------------------------------------------------------------
# Set the branch ids that we want to check out from git. Usually master will be ok
# for these libraries as they are fairly stable - but should be set to a fixed version
# for release. Setting to 'master' will pull the latest available version.
set(GOOGLE_TEST_TAG      "master")
set(GOOGLE_BENCHMARK_TAG "v1.0.0")

set(BINARY_NAME "test-travis-application")
set(BINARY_VERSION "0.0.1")

project(${BINARY_NAME} CXX)

# Write out all of the compilation commands into a compile_commands.json to allow for debugging of
# the cmake generated build. The compile_commands.json can also be used by various editors to allow
# autocompletion of C++ code.
set(CMAKE_EXPORT_COMPILE_COMMANDS "ON")

#------------------------------------------------------------------------------------------------
# External Projects
#------------------------------------------------------------------------------------------------
include(ExternalProject)

# Download and install the Google Test project. Required only when building the unit tests
# so should only be added as a dependency of that binary. Build type and install location
# are forwarded through to make sure that everything links.
ExternalProject_Add(
        GoogleTest
        GIT_REPOSITORY      "https://github.com/google/googletest.git"
        GIT_TAG             "${GOOGLE_TEST_TAG}"
        SOURCE_DIR          "${CMAKE_BINARY_DIR}/googletest"
        CMAKE_ARGS          "-DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}"
                            "-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")

# Download and install the Google Benchmark project. Required only when building the micro
# benchmarks and so should only be added as a dependency of that binary. Build type and
# install location are forwarded through to make sure everything links.
ExternalProject_Add(
        GoogleBenchmark
        GIT_REPOSITORY      "https://github.com/google/benchmark.git"
        GIT_TAG             "${GOOGLE_BENCHMARK_TAG}"
        SOURCE_DIR          "${CMAKE_BINARY_DIR}/benchmark"
        CMAKE_ARGS          "-DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}"
                            "-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")

#------------------------------------------------------------------------------------------------
# Paths & Flags
#------------------------------------------------------------------------------------------------
include_directories(SYSTEM "${CMAKE_BINARY_DIR}/include")     # third party headers generated by external projects
include_directories(SYSTEM "${CMAKE_SOURCE_DIR}/include")     # headers that make up the 'public' api for clients
include_directories(SYSTEM "${CMAKE_SOURCE_DIR}/src")         # private headers that are mixed with the cpp code

link_directories("${CMAKE_BINARY_DIR}/lib")                   # third party libraries generated by external projects

# Append additional flags for our code since we can't control external libraries
# These flags are also set for all builds as they do not modify the output of the
# binary. Ignore flags on MSVC as it doesn't have any equivalent support for them.
if (NOT MSVC)
    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic")
    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wconversion -Wcast-align -Wformat=2 -Wformat-security")
    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-common -Wstrict-overflow -Wno-unused-parameter")
endif()

#------------------------------------------------------------------------------------------------
# Paths & Flags
#------------------------------------------------------------------------------------------------
set(SOURCE_FILES src/Main.cpp)
set(TEST_FILES test/SharedLibraryTest.cpp)
set(BENCH_FILES benchmarks/SharedLibraryBenchmarks.cpp)

configure_file("${CMAKE_SOURCE_DIR}/include/config.h" "${CMAKE_BINARY_DIR}/include/config.h")

#------------------------------------------------------------------------------------------------
# Build Shared Library
#------------------------------------------------------------------------------------------------
# Shared libraries for kdb+ do not require any external dependencies - all of the required
# runtime (kdb, winsock etc.) is provided by the q executable.
add_library(${BINARY_NAME} SHARED ${SOURCE_FILES})

# Enable C++11 standard compiler in a cross-platform way - this requires cmake 3.2+ to work.
set_property(TARGET ${BINARY_NAME} PROPERTY CXX_STANDARD 11)
set_property(TARGET ${BINARY_NAME} PROPERTY CXX_STANDARD_REQUIRED ON)

#------------------------------------------------------------------------------------------------
# Build Unit Tests
#------------------------------------------------------------------------------------------------
# Set up a standalone Google Test binary to run all of our unit tests. GoogleTest will work
# across all platforms as long as the correct parameters are passed during the build process.
# Also need to link against different libraries depending on the compiler used (e.g. MSVC
# doesn't support pthreads).
add_executable(${BINARY_NAME}Test ${TEST_FILES})
add_dependencies(${BINARY_NAME}Test GoogleTest)

# Enable C++11 standard compiler in a cross-platform way - this requires cmake 3.2+ to work.
set_property(TARGET ${BINARY_NAME}Test PROPERTY CXX_STANDARD 11)
set_property(TARGET ${BINARY_NAME}Test PROPERTY CXX_STANDARD_REQUIRED ON)

# Might need ntdll.dll in order to get the _allmul and _alldiv calls to work with internal windows API? Perhaps
# the only option here is to work with the MVSC compiler instead? (only occurs with 32-bit as these function are
# used to emulate 64-bit adds within a 32-bit binary as the compiler cannot emit the full instructions)
target_link_libraries(${BINARY_NAME}Test
        gtest
        gtest_main
        gmock
        pthread                           # pthread might only be required for mingw/linux builds? not available via MSVC compiler
        $<$<PLATFORM_ID:WIN32>:shlwapi>   # required by google test/benchmark on windows
        $<$<PLATFORM_ID:WIN32>:ws2_32>)   # required by kdb+ on windows standalone executables)

#------------------------------------------------------------------------------------------------
# Build Micro Benchmarks
#------------------------------------------------------------------------------------------------
add_executable(${BINARY_NAME}Benchmarks ${BENCH_FILES})
add_dependencies(${BINARY_NAME}Benchmarks GoogleBenchmark)

# Enable C++11 standard compiler in a cross-platform way - this requires cmake 3.2+ to work.
set_property(TARGET ${BINARY_NAME}Benchmarks PROPERTY CXX_STANDARD 11)
set_property(TARGET ${BINARY_NAME}Benchmarks PROPERTY CXX_STANDARD_REQUIRED ON)

# Might need ntdll.dll in order to get the _allmul and _alldiv calls to work with internal windows API? Perhaps
# the only option here is to work with the MVSC compiler instead? (only occurs with 32-bit as these function are
# used to emulate 64-bit adds within a 32-bit binary as the compiler cannot emit the full instructions)
target_link_libraries(${BINARY_NAME}Benchmarks
        benchmark
        pthread
        $<$<PLATFORM_ID:WIN32>:shlwapi>   # required by google test/benchmark on windows
        $<$<PLATFORM_ID:WIN32>:ws2_32>)   # required by kdb+ on windows standalone executables)